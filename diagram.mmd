```mermaid
flowchart TB
    subgraph "Rota Optimizasyon Sistemi"
        %% Ana akış
        API["/api/optimize API"] --> RouteOptimizer["optimize_routes Fonksiyonu"]
        RouteOptimizer --> PreCheck{"Ön Koşul Kontrolü"}
        
        PreCheck -->|Depo Yok| Error1["Hata Döndür: Aktif depo bulunamadı"]
        PreCheck -->|Araç Yok| Error2["Hata Döndür: Sürücülü aktif araç bulunamadı"]
        PreCheck -->|Müşteri Yok| Error3["Hata Döndür: Müşteri bulunamadı"]
        PreCheck -->|Başarılı| SelectCustomers[Müşterileri Seç]
        
        SelectCustomers --> CapacityCheck{"Kapasite Kontrolü"}
        CapacityCheck -->|Talep > Kapasite| Error4["Hata Döndür: Talep kapasiteyi aşıyor"]
        CapacityCheck -->|Geçerli| InitData[Problem Verisi Oluştur]
        
        InitData --> OSRMInit[OSRM Handler Başlat]
        OSRMInit --> PrecomputeDistances[Mesafeleri Önceden Hesapla]
        
        PrecomputeDistances -->|Başarısız| Error5["Hata Döndür: Mesafeler hesaplanamadı"]
        PrecomputeDistances -->|Başarılı| RunTabuSearch[Tabu Arama Çalıştır]
        
        RunTabuSearch -->|Çözüm Bulundu| ProcessResult[Optimizasyon Sonuçlarını İşle]
        RunTabuSearch -->|Çözüm Yok| Error6["Hata Döndür: Uygun çözüm bulunamadı"]
        
        ProcessResult --> AssignRoutes[Rotaları Araç/Sürücülere Ata]
        AssignRoutes -->|Başarılı| ReturnSuccess[Rotaları Döndür]
        AssignRoutes -->|Başarısız| Error7["Hata Döndür: Rotalar atanamadı"]
    
        %% OSRM ve Yükseklik Veri Akışı
        subgraph "Mesafe ve Yükseklik Veri Servisi"
            direction TB
            OSRMInit --> InitCache[Mesafe/Yükseklik Önbelleklerini Başlat]
            PrecomputeDistances --> GetTable[OSRM Tablo Servisini Çağır]
            GetTable --> ProcessMatrix[Mesafe Matrisini İşle]
            ProcessMatrix --> CacheDist[Mesafeleri Önbelleğe Al]
            
            ElevationInit[Yükseklik İşleyicisini Başlat] --> ElevCache[Yükseklik Önbelleğini Yükle]
            ElevationInit --> CallElevAPI[Open Elevation API'yi Çağır]
            CallElevAPI --> ComputeProfile[Yükseklik Profilini Hesapla]
            ComputeProfile --> CacheElev[Yükseklik Verilerini Önbelleğe Al]
        end
        
        %% Tabu Arama Algoritması
        subgraph "Tabu Arama Algoritması"
            direction TB
            InitSolution[Başlangıç Çözümü Oluştur] --> EvalInitSol[Başlangıç Çözümünü Değerlendir]
            EvalInitSol --> TabuLoop[Ana Tabu Arama Döngüsü]
            
            TabuLoop --> GenNeighbors[Komşu Çözümler Üret]
            GenNeighbors --> EvalNeighbors[Çözümleri Değerlendir]
            EvalNeighbors --> CheckTabu{Tabu Listesinde?}
            
            CheckTabu -->|Evet| Skip[Çözümü Atla]
            CheckTabu -->|Hayır| SelectBest[En İyi Çözümü Seç]
            
            SelectBest --> UpdateCurrent[Mevcut Çözümü Güncelle]
            UpdateCurrent --> CheckImprove{İyileşme Var?}
            
            CheckImprove -->|Evet| UpdateBest[En İyi Çözümü Güncelle]
            CheckImprove -->|Hayır| IncrStagnation[Durgunluk Sayacını Artır]
            
            UpdateBest --> ResetStagnation[Durgunluk Sayacını Sıfırla]
            IncrStagnation --> CheckStagnation{Durgunluk Limiti?}
            ResetStagnation --> AddTabu[Tabu Listesine Ekle]
            
            CheckStagnation -->|Evet| Diversify[Çözümü Çeşitlendir]
            CheckStagnation -->|Hayır| AddTabu
            
            AddTabu --> CheckIter{Maksimum İterasyon?}
            Diversify --> CheckIter
            
            CheckIter -->|Hayır| TabuLoop
            CheckIter -->|Evet| SplitRoutes[Rotalara Böl]
            
            SplitRoutes --> AnalyzeRoutes[Rota Kalitesini Analiz Et]
            AnalyzeRoutes --> ReturnRoutes[Rotaları Döndür]
        end
        
        %% Enerji Maliyeti Hesaplama
        subgraph "Enerji Maliyeti Hesaplama"
            direction TB
            GetDistance[Mesafe Al] --> CheckCache{Önbellekte?}
            
            CheckCache -->|Evet| ReturnCached[Önbellekten Değeri Döndür]
            CheckCache -->|Hayır| GetDetails[Rota Detaylarını Al]
            
            GetDetails --> GetElev[Yükseklik Profilini Al]
            GetElev --> CalcElevPenalty[Yükseklik Cezasını Hesapla]
            CalcElevPenalty --> CombineCost[Mesafe Maliyetiyle Birleştir]
            CombineCost --> CacheResult[Sonucu Önbelleğe Al]
            
            CalcEnergy[calculate_energy_cost] --> CheckEnCache{Enerji Önbelleğinde?}
            CheckEnCache -->|Evet| ReturnEnCached[Önbellekten Değeri Döndür]
            CheckEnCache -->|Hayır| GetElevProfile[Yükseklik Profilini Al]
            
            GetElevProfile --> CalcGradient[Eğim Yüzdesini Hesapla]
            CalcGradient --> CalcLoad[Yük Faktörünü Hesapla]
            
            CalcLoad --> CheckUphill{Yokuş Yukarı?}
            
            CheckUphill -->|Evet| UphillCalc[Yokuş Yukarı Maliyeti Hesapla]
            CheckUphill -->|Hayır| DownhillCalc[Yokuş Aşağı Tasarrufunu Hesapla]
            
            UphillCalc --> ApplyGradientFactor[Eğim Faktörünü Uygula]
            DownhillCalc --> ApplyGradientFactor
            
            ApplyGradientFactor --> ComputeFinalCost[Final Maliyeti Hesapla]
            ComputeFinalCost --> CacheEnergy[Enerji Maliyetini Önbelleğe Al]
        end
        
        %% Çözüm Değerlendirme
        subgraph "Çözüm Değerlendirme"
            direction TB
            EvalSolution[evaluate_solution_cost] --> SplitSolution[Rotalara Böl]
            SplitSolution --> LoopRoutes[Rotaları Döngüye Al]
            
            LoopRoutes --> CalculateDistance[Segment Mesafesini Al]
            CalculateDistance --> CalculateEnergyCost[Enerji Maliyetini Hesapla]
            
            CalculateEnergyCost --> SegmentDone{Tüm Segmentler?}
            SegmentDone -->|Hayır| NextSegment[Sonraki Segmente Geç]
            NextSegment --> CalculateDistance
            
            SegmentDone -->|Evet| AddDepotReturn[Depoya Dönüş Maliyetini Ekle]
            AddDepotReturn --> WeightCosts[Mesafe ve Enerji Ağırlıklarını Uygula]
            WeightCosts --> ReturnHybridCost[Hibrit Maliyeti Döndür]
        end
    end
    
    %% Alt grafikler arası bağlantılar
    RunTabuSearch -.-> InitSolution
    EvalNeighbors -.-> EvalSolution
    GetElev -.-> ElevationInit
    CalculateEnergyCost -.-> CalcEnergy
    CalculateDistance -.-> GetDistance
``` 